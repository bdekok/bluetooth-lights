{"version":3,"sources":["components/ConnectButton.js","components/ColorInput.js","bluetooth/Bulb.js","components/ColorBackground.js","BulbViewCtrl.js","App.js","registerServiceWorker.js","index.js"],"names":["ConnectButton","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","connect","bulb","then","connectFunction","catch","inherits","createClass","key","value","react_default","a","createElement","onClick","React","Component","ColorInputList","colorInputs","i","colors","length","push","ColorInput_ColorInput","colorNr","color","changeColorFunction","ColorInput","event","target","type","onChange","updateColor","settings","name","namePrefix","service","colorWriteCharacteristic","colorReadCharacteristic","Bulb","_colorWriteCharacteristic","_device","Promise","resolve","reject","navigator","bluetooth","requestDevice","filters","optionalServices","device","addEventListener","reconnectDevice","connectDevice","server","getCharacteristic","error","console","gatt","_this2","characteristic","getPrimaryService","r","g","b","connected","writeValue","Uint8Array","ColorBackground","backgroundColor","createRef","lastComputedColor","updateCSSVariableColors","timerID","setInterval","updateLight","clearInterval","prevProps","_this3","forEach","current","style","setProperty","concat","computedColor","window","getComputedStyle","rgb","replace","split","parseInt","updateBulbColor","className","ref","BulbViewCtrl","_Component","setConnection","setState","addColor","prevState","getRandomColor","removeColor","splice","setColors","map","colorInfo","state","changeColor","Math","floor","random","ColorInput_ColorInputList","ColorBackground_ColorBackground","ConnectButton_ConnectButton","App","addBulb","bulbCount","removeBulb","lightCtrls","BulbViewCtrl_BulbViewCtrl","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","ReactDOM","render","src_App","document","getElementById","URL","process","origin","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.28e5a060.chunk.js","sourcesContent":["import React from 'react';\n\nexport class ConnectButton extends React.Component {\n  constructor(props) {\n    super();\n  }\n\n  connect = () => {\n    this.props.bulb.connect().then(() => {\n      this.props.connectFunction(true);\n    }).catch(() => {\n      this.props.connectFunction(false);\n    })\n  }\n\n  render() {\n    return (\n      <button onClick={this.connect}>Connect</button>\n    )\n  }\n}","import React from 'react';\n\nexport const ColorInputList = (props) => {\n  let colorInputs = [];\n  for (let i = 0; i < props.colors.length; i++) {\n    colorInputs.push(<ColorInput key={props.colors[i].colorNr} colorNr={props.colors[i].colorNr} color={props.colors[i].color} changeColorFunction={props.changeColorFunction}></ColorInput>);\n  }\n  return colorInputs;\n}\n\nexport class ColorInput extends React.Component {\n  constructor(props) {\n    super()\n  }\n\n  updateColor(event) {\n    this.props.changeColorFunction(this.props.colorNr, event.target.value)\n  }\n\n  render() {\n    return (\n      <input type=\"color\" value={this.props.color} onChange={(event) => this.updateColor(event)} />\n    )\n  }\n}","const settings = {\n  name: [{namePrefix: 'LED'}],\n  service: 0xcc02,\n  colorWriteCharacteristic: 0xee03,\n  colorReadCharacteristic: 0xee01 // doesn't seem to work?\n};\n\nexport class Bulb {\n  constructor() {\n    this._colorWriteCharacteristic = null;\n    this._device = null;\n  }\n\n  connect() {\n    return new Promise((resolve, reject) => {\n      navigator.bluetooth.requestDevice({\n        filters: settings.name,\n        optionalServices: [settings.service]\n      })\n        .then(device => {\n          this._device = device;\n          this._device.addEventListener('gattserverdisconnected', () => this.reconnectDevice());\n          return this.connectDevice();\n        })\n        .then(server => {\n          this._colorWriteCharacteristic = this.getCharacteristic(server, settings.colorWriteCharacteristic);\n          return resolve();\n        })\n        .catch(error => {\n          console.error(error);\n          reject(error);\n        });\n    });\n  }\n\n  connectDevice() {\n    return this._device.gatt.connect();\n  }\n\n  reconnectDevice() {\n    this._colorWriteCharacteristic = null;\n    this.connectDevice().then(server => {\n      this._colorWriteCharacteristic = this.getCharacteristic(server, settings.colorWriteCharacteristic);\n    });\n  }\n\n  getCharacteristic(server, characteristic) {\n    return server.getPrimaryService(settings.service)\n      .then(service => service.getCharacteristic(characteristic));\n  }\n\n  changeColor(r, g, b) {\n    if (!this._colorWriteCharacteristic || !this._device.gatt.connected) {return;}\n    this._colorWriteCharacteristic = this._colorWriteCharacteristic.then(characteristic => {\n      return characteristic.writeValue(new Uint8Array([0x01, g, 0x01, 0x00, 0x01, b, 0x01, r, 0x01, 0x00]))\n        .then(() => characteristic);\n    })\n      .catch(error => {\n        console.error('Argh! ' + error);\n      });\n  }\n}\n","import React from 'react';\n\nexport class ColorBackground extends React.Component {\n  constructor(props) {\n    super(props);\n    this.backgroundColor = React.createRef();\n    this.lastComputedColor = '';\n  }\n\n  componentDidMount() {\n    this.updateCSSVariableColors(this.props.colors);\n    this.timerID = setInterval(() => this.updateLight(), 50);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  componentDidUpdate(prevProps) {\n    this.updateCSSVariableColors(this.props.colors);\n  }\n\n  updateCSSVariableColors(colors) {\n    colors.forEach(color => {\n      this.backgroundColor.current.style.setProperty(`--bg-color-${color.colorNr}`, color.color);\n    });\n  }\n\n  updateLight() {\n    const computedColor = window.getComputedStyle(this.backgroundColor.current).backgroundColor;\n    const rgb = computedColor.replace(/^rgba?\\(|\\s+|\\)$/g, '').split(',');\n\n    if (computedColor !== this.lastComputedColor) {\n      this.lastComputedColor = computedColor;\n      const r = parseInt(rgb[0], 10);\n      const g = parseInt(rgb[1], 10);\n      const b = parseInt(rgb[2], 10);\n      this.props.updateBulbColor(r, g, b);\n    }\n  }\n\n  render() {\n    let className = `background-color background-color--length-${this.props.colors.length}`;\n    return (<div className={className} ref={this.backgroundColor} />);\n  }\n}\n","import React, {Component} from 'react';\nimport {ConnectButton} from './components/ConnectButton';\nimport {ColorInputList} from './components/ColorInput';\nimport {Bulb} from './bluetooth/Bulb';\nimport {ColorBackground} from './components/ColorBackground';\n\nexport class BulbViewCtrl extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      bulb: new Bulb(),\n      connected: false,\n      colors: [{\n        colorNr: 1,\n        color: this.getRandomColor()\n      }]\n    };\n  }\n\n  setConnection = (connected) => {\n    this.setState({connected: connected});\n  }\n\n  addColor = () => {\n    this.setState(prevState => {\n      return prevState.colors.push({\n        colorNr: prevState.colors.length + 1,\n        color: this.getRandomColor()\n      })\n    })\n  }\n\n  removeColor = () => {\n    this.setState(prevState => {\n      return prevState.colors.splice(-1, 1);\n    })\n  }\n\n  setColors = (colorNr, color) => {\n    this.setState(prevState => prevState.colors.map(colorInfo => {\n      if (colorInfo.colorNr === colorNr) {\n        return colorInfo.color = color;\n      }\n      return null;\n    }));\n  }\n  updateBulbColor = (r, g, b) => {\n    this.state.bulb.changeColor(r, g, b);\n  }\n\n  getRandomColor() {\n    const hex = '0123456789abcdef';\n    let color = '#';\n    for (var i = 0; i < 6; i++) {\n      color += hex[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  }\n\n  render() {\n    if (!this.state.connected) {\n      return (\n        <div className=\"bulb\">\n          <div>\n            <ConnectButton bulb={this.state.bulb} connectFunction={this.setConnection}></ConnectButton>\n          </div>\n        </div>\n      )\n    } else {\n      return (\n        <div className=\"bulb\">\n          <div>\n            <ColorInputList colors={this.state.colors} changeColorFunction={this.setColors} />\n            <ColorBackground colors={this.state.colors} updateBulbColor={this.updateBulbColor} />\n          </div>\n          <div>\n            {this.state.colors.length > 1 ? <button onClick={this.removeColor}>-</button> : ''}\n            {this.state.colors.length <= 5 ? <button onClick={this.addColor}>+</button> : ''}\n          </div>\n        </div>\n      )\n    }\n  }\n}\n","import React, {Component} from 'react';\nimport {BulbViewCtrl} from './BulbViewCtrl';\n\nclass App extends Component {\n  constructor(props) {\n    super();\n    this.state = {bulbCount: 1}\n  }\n\n  addBulb = () => {\n    this.setState(prevState => {\n      return {bulbCount: prevState.bulbCount + 1};\n    });\n  }\n\n  removeBulb = () => {\n    this.setState(prevState => {\n      return {bulbCount: prevState.bulbCount - 1};\n    });\n  }\n\n  render() {\n    let lightCtrls = [];\n    for (let i = 0; i < this.state.bulbCount; i++) {\n      lightCtrls.push(<BulbViewCtrl key={i} />);\n    }\n\n    return (\n      <div>\n        <div className=\"container\">\n          {lightCtrls}\n        </div>\n        <div className=\"bulbControls\">\n          {this.state.bulbCount < 4 ? <button className=\"add-button\" onClick={this.addBulb}>Add Light</button> : ''}\n          {this.state.bulbCount > 1 ? <button className=\"add-button\" onClick={this.removeBulb}>Remove Light</button> : ''}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}